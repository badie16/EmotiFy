/**
 * Service pour l'analyse des Ã©motions dans les conversations de chat
 * Utilise Gemini AI pour dÃ©tecter les Ã©motions et les signaux de dÃ©tresse
 */

// Fonction pour analyser les Ã©motions dans une conversation de chat
export async function analyzeChatEmotions(genAI, conversation) {
	try {
		// Si Gemini AI n'est pas configurÃ©, utiliser le mode simulÃ©
		if (!genAI) {
			console.log(
				"Gemini AI n'est pas configurÃ©, utilisation du mode simulÃ© pour l'analyse de chat"
			);
			return generateMockChatAnalysis(conversation);
		}

		console.log(
			"Analyse de conversation avec Gemini AI:",
			conversation.substring(0, 100) + "..."
		);

		// Utiliser le modÃ¨le Gemini Pro
		const model = genAI.getGenerativeModel({
			model: "models/gemini-1.5-flash",
		});

		// Prompt pour l'analyse des Ã©motions et des signaux de dÃ©tresse
		const prompt = `
    Analyse la conversation suivante et identifie:
    1. Les Ã©motions prÃ©sentes avec leur intensitÃ© sur une Ã©chelle de 0 Ã  1
    2. Les signaux de dÃ©tresse ou de risque sur une Ã©chelle de 0 Ã  1

    Conversation:
    ${conversation}
    
    RÃ©ponds uniquement avec un objet JSON contenant deux parties:
    1. "emotions": les Ã©motions dÃ©tectÃ©es et leur score
    2. "flags": les signaux de dÃ©tresse ou de risque

    Exemple:
    {
      "emotions": {
        "joy": 0.1,
        "sadness": 0.4,
        "anger": 0.2,
        "fear": 0.2,
        "surprise": 0.1
      },
      "flags": {
        "suicidal": 0.1,
        "harassment": 0.2,
        "distress": 0.7,
        "selfHarm": 0.1,
        "violence": 0.0
      }
    }
    
    Pour les Ã©motions, inclus uniquement: joy, sadness, anger, fear, surprise, disgust, neutral, love, admiration, approval, caring, confusion, curiosity, desire, disappointment, disapproval, embarrassment, excitement, gratitude, grief, nervousness, optimism, pride, realization, relief, remorse, annoyance, amusement.
    
    Pour les flags, Ã©value: suicidal (idÃ©es suicidaires), harassment (harcÃ¨lement), distress (dÃ©tresse), selfHarm (automutilation), violence (violence).
    
    La somme des valeurs des Ã©motions doit Ãªtre 1, chaque valeur reprÃ©sente une probabilitÃ©.
    Les flags sont indÃ©pendants les uns des autres et reprÃ©sentent chacun une probabilitÃ© de 0 Ã  1.
    `;

		console.log("Envoi du prompt Ã  Gemini pour l'analyse de chat");
		const result = await model.generateContent(prompt);
		const response = await result.response;
		const text = response.text();

		// Extraire l'objet JSON de la rÃ©ponse
		console.log("RÃ©ponse brute de Gemini pour l'analyse de chat:", text);

		const jsonMatch = text.match(/{[\s\S]*}/);

		if (jsonMatch) {
			const analysis = JSON.parse(jsonMatch[0]);
			console.log("Analyse extraite:", analysis);
			return analysis;
		} else {
			console.error("Format de rÃ©ponse invalide de Gemini");
			throw new Error("Format de rÃ©ponse invalide");
		}
	} catch (error) {
		console.error("Erreur lors de l'analyse du chat avec Gemini:", error);
		console.log("Utilisation du mode simulÃ© en raison d'une erreur");
		return generateMockChatAnalysis(conversation);
	}
}

// Fonction pour gÃ©nÃ©rer une analyse simulÃ©e en cas d'erreur ou si Gemini n'est pas disponible
function generateMockChatAnalysis(conversation) {
	console.log("GÃ©nÃ©ration d'une analyse de chat simulÃ©e");

	// Analyse basique du texte pour simuler une dÃ©tection d'Ã©motions
	const lowerConversation = conversation.toLowerCase();

	// DÃ©tection basique de mots-clÃ©s pour simuler l'analyse
	const joyKeywords = [
		"heureux",
		"content",
		"joie",
		"super",
		"gÃ©nial",
		"excellent",
		":)",
		"ðŸ˜Š",
		"haha",
	];
	const sadnessKeywords = [
		"triste",
		"dÃ©primÃ©",
		"malheureux",
		"dÃ©solÃ©",
		"malheureusement",
		":(",
		"ðŸ˜¢",
	];
	const angerKeywords = [
		"Ã©nervÃ©",
		"colÃ¨re",
		"furieux",
		"frustrÃ©",
		"agacÃ©",
		"merde",
		"putain",
		"ðŸ˜ ",
	];
	const fearKeywords = [
		"peur",
		"effrayÃ©",
		"inquiet",
		"anxieux",
		"stressÃ©",
		"terrifiÃ©",
		"ðŸ˜¨",
	];
	const suicidalKeywords = [
		"suicide",
		"mourir",
		"plus la peine",
		"en finir",
		"disparaÃ®tre",
	];
	const harassmentKeywords = [
		"harcÃ¨lement",
		"insulte",
		"menace",
		"intimidation",
	];

	// Calculer des scores basiques basÃ©s sur la prÃ©sence de mots-clÃ©s
	let joyScore = countKeywords(lowerConversation, joyKeywords) * 0.2;
	let sadnessScore = countKeywords(lowerConversation, sadnessKeywords) * 0.2;
	let angerScore = countKeywords(lowerConversation, angerKeywords) * 0.2;
	let fearScore = countKeywords(lowerConversation, fearKeywords) * 0.2;

	// Ajouter des valeurs alÃ©atoires pour complÃ©ter
	joyScore += Math.random() * 0.2;
	sadnessScore += Math.random() * 0.2;
	angerScore += Math.random() * 0.2;
	fearScore += Math.random() * 0.2;
	const surpriseScore = Math.random() * 0.2;
	const disgustScore = Math.random() * 0.2;

	// Normaliser pour que la somme soit 1
	const totalEmotions =
		joyScore +
		sadnessScore +
		angerScore +
		fearScore +
		surpriseScore +
		disgustScore;

	// Calculer les scores de signaux de dÃ©tresse
	const suicidalScore =
		countKeywords(lowerConversation, suicidalKeywords) * 0.3 +
		Math.random() * 0.1;
	const harassmentScore =
		countKeywords(lowerConversation, harassmentKeywords) * 0.3 +
		Math.random() * 0.1;
	const distressScore = (sadnessScore + fearScore) * 0.5 + Math.random() * 0.2;

	return {
		emotions: {
			joy: joyScore / totalEmotions,
			sadness: sadnessScore / totalEmotions,
			anger: angerScore / totalEmotions,
			fear: fearScore / totalEmotions,
			surprise: surpriseScore / totalEmotions,
			disgust: disgustScore / totalEmotions,
		},
		flags: {
			suicidal: Math.min(suicidalScore, 1),
			harassment: Math.min(harassmentScore, 1),
			distress: Math.min(distressScore, 1),
			selfHarm: Math.random() * 0.3,
			violence: Math.random() * 0.2,
		},
	};
}

// Fonction utilitaire pour compter les occurrences de mots-clÃ©s
function countKeywords(text, keywords) {
	return keywords.reduce((count, keyword) => {
		const regex = new RegExp(keyword, "gi");
		const matches = text.match(regex);
		return count + (matches ? matches.length : 0);
	}, 0);
}
